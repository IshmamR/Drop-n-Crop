[{"F:\\0ReactZ\\drop-n-crop\\src\\index.js":"1","F:\\0ReactZ\\drop-n-crop\\src\\App.js":"2","F:\\0ReactZ\\drop-n-crop\\src\\components\\DropAndCrop.js":"3","F:\\0ReactZ\\drop-n-crop\\src\\utils\\FileUtils.js":"4"},{"size":172,"mtime":1610645569654,"results":"5","hashOfConfig":"6"},{"size":393,"mtime":1610719126171,"results":"7","hashOfConfig":"6"},{"size":5248,"mtime":1610719105801,"results":"8","hashOfConfig":"6"},{"size":1828,"mtime":1610714558596,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1kxyyzr",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\0ReactZ\\drop-n-crop\\src\\index.js",[],["20","21"],"F:\\0ReactZ\\drop-n-crop\\src\\App.js",[],"F:\\0ReactZ\\drop-n-crop\\src\\components\\DropAndCrop.js",["22"],"import React, { useState, createRef } from 'react';\r\n\r\nimport Dropzone from 'react-dropzone';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { base64StringToFile, getFileExtensionOfBase64, image64ToCanvasRef, downloadBase64File } from '../utils/FileUtils';\r\n\r\nconst acceptedFileTypesArray = ['image/x-png', 'image/png', 'image/x-jpg', 'image/jpeg', 'image/gif'];\r\n\r\nconst DropAndCrop = () => {\r\n\tconst [msg, setMsg] = useState(null);\r\n\tconst [imgSrc, setImgSrc] = useState(null);\r\n\tconst [imgRef, setImgRef] = useState({});\r\n\tconst [crop, setCrop] = useState({ \r\n\t\tunit: 'px', x: '0', y:'0'\r\n\t});\r\n\tconst [canvasRef] = useState(createRef());\r\n\r\n\t// Verify file for image files\r\n\tconst maxSize = 10485760; // 10 Megabyte\r\n\tconst verifyFileSize = (file) => {\r\n\t\tif(file !== null && file.size > maxSize) {\r\n\t\t\talert(\"You file is too big Oni-chan\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!acceptedFileTypesArray.includes(file.type)) {\r\n\t\t\tsetMsg({\r\n\t\t\t\ttext: \"Please insert a valid image file\",\r\n\t\t\t\tcolor: \"red\"\r\n\t\t\t});\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// console.log(file);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tconst handleOnDrop = (files, rejFiles, e) => {\r\n\t\thandleClear(e);\r\n\t\tif (rejFiles && rejFiles.length > 0) {\r\n\t\t\tsetMsg({\r\n\t\t\t\ttext: \"Please insert a valid image file\",\r\n\t\t\t\tcolor: \"red\"\r\n\t\t\t});\r\n\t\t}\r\n\t\tvar imgFile = files.length > 0 ? files[0] : null;\r\n\t\tif (imgFile !== null && verifyFileSize(imgFile)) {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.addEventListener(\"load\", () => {\r\n\t\t\t\t// console.log(imgFile);\r\n\t\t\t\tsetImgSrc(reader.result);\r\n\t\t\t}, false);\r\n\t\t\treader.readAsDataURL(imgFile);\r\n\t\t\tsetMsg(null);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleImageLoaded = (image) => {\r\n\t\tsetImgRef({\r\n\t\t\tscaleX : image.naturalWidth / image.width,\r\n\t\t\tscaleY : image.naturalHeight / image.height\r\n\t\t});\r\n\t}\r\n\tconst handleOnCropChange = (cropped) => {\r\n\t\tsetCrop(cropped);\r\n\t\t// console.log(crop, cropped);\r\n\t}\r\n\tconst handleOnCropComplete = (cropped, percentCrop) => {\r\n\t\t// console.log(cropped, percentCrop);\r\n\t\tconst canvasCurrentRef = canvasRef.current;\r\n\t\tconst img64Src = imgSrc;\r\n\t\t// console.log(imgRef);\r\n\t\timage64ToCanvasRef(canvasCurrentRef, img64Src, cropped, imgRef);\r\n\t}\r\n\r\n\tconst handleDownload = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst canvasCurrentRef = canvasRef.current;\r\n\t\tconst fileExtension = getFileExtensionOfBase64(imgSrc);\r\n\t\tconst croppedImgData = canvasCurrentRef.toDataURL('image/' + fileExtension);\r\n\t\tconst fileName = \"croppedImage.\" + fileExtension;\r\n\t\t// base64StringToFile(croppedImgData, fileName); // for upload purposes\r\n\t\tdownloadBase64File(croppedImgData, fileName);\r\n\t\tsetMsg({\r\n\t\t\ttext: \"Thank you\",\r\n\t\t\tcolor: 'green'\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleClear = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst canvas = canvasRef.current;\r\n\t\tif(canvas && canvas !== null) {\r\n\t\t\tconst ctx = canvas.getContext('2d');\r\n\t\t\tif(ctx !== null) ctx.clearRect(0,0, canvas.width, canvas.height);\r\n\t\t\tsetImgSrc(null);\r\n\t\t\tsetImgRef({});\r\n\t\t\tsetCrop({ unit: 'px' });\r\n\t\t\tsetMsg(null);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsetMsg({\r\n\t\t\t\ttext: \"Nothing to clear\",\r\n\t\t\t\tcolor: 'yellow'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"DropAndCrop min-h-screen pb-10\">\r\n\t\t<div className=\"w-full flex items-center justify-center my-4\">\r\n\t\t\t<Dropzone onDrop={handleOnDrop} accept={acceptedFileTypesArray} multiple={false} >\r\n\t\t\t\t{({getRootProps, getInputProps}) => (\r\n\t\t\t\t<div className=\"max-w-xs w-10/12 border border-dashed border-black cursor-move bg-gray-100 p-5\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\t{...getRootProps({\r\n\t\t\t\t\t\t\tclassName: 'dropzone',\r\n\t\t\t\t\t\t\tonDrop: (event, file) => {\r\n\t\t\t\t\t\t\t\thandleOnDrop(event.dataTransfer.files, null, event)\r\n\t\t\t\t\t\t\t\tevent.stopPropagation() \r\n\t\t\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<input className=\"bg-gray-400 w-full h-full\" {...getInputProps()} />\r\n\t\t\t\t\t\t<p className=\"text-gray-700 cursor-pointer mb-2 text-center\">\r\n\t\t\t\t\t\t\tDrag and drop image here\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<button className=\"bg-blue-400 hover:bg-blue-500 hover:text-white text-center w-full p-2 shadow-sm rounded-sm\">\r\n\t\t\t\t\t\t\tor click to select image\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</Dropzone>\r\n\t\t</div>\r\n\r\n\t\t{msg? \r\n\t\t\t(<div className={`w-40 text-center bg-${msg.color}-500 bg-opacity-50 border-2 border-${msg.color}-600 p-2 mx-auto my-2`}>{msg.text}</div>) \r\n\t\t\t: ''}\r\n\r\n\t\t<div className=\"block text-center\">\r\n\t\t\t<button onClick={handleClear} className=\"bg-indigo-500 rounded-sm text-white shadow-md hover:shadow-none p-2 mb-3\">\r\n\t\t\t\tClear\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t\r\n\t\t<div className=\"w-11/12 md:w-7/12 mx-auto grid md:grid-cols-2\">\r\n\t\t\t{imgSrc !== null ? \r\n\t\t\t\t<>\r\n\t\t\t\t<ReactCrop \r\n\t\t\t\t\tsrc={imgSrc} crop={crop} className=\"mx-auto\"\r\n\t\t\t\t\tonImageLoaded={handleImageLoaded} \r\n\t\t\t\t\tonChange={handleOnCropChange} \r\n\t\t\t\t\tonComplete={handleOnCropComplete} \r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t<canvas className=\"mx-auto mt-4 md:mt-0\" ref={canvasRef}></canvas>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName=\"bg-green-400 hover:bg-green-500 text-white p-2 mt-6\"\r\n\t\t\t\t\t\tonClick={handleDownload}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tDownload\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t\t: ''\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default DropAndCrop;\r\n// <img className=\"border border-gray-100\" src={imgSrc} alt=\"Preview Image\" /> ","F:\\0ReactZ\\drop-n-crop\\src\\utils\\FileUtils.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":6,"column":10,"nodeType":"29","messageId":"30","endLine":6,"endColumn":28},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'base64StringToFile' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]